USE MARKET_DB;

CREATE TABLE HONGONG4(
TINYINT_COL TINYINT,
SMALLINT_COL SMALLINT,
INT_COL INT,
BIGINT_COL BIGINT
);

INSERT INTO HONGONG4
VALUES(127, 32767, 2147483647, 900000000000000);

SELECT *
FROM HONGONG4;

CREATE DATABASE NETFLIX_DB;
USE NETFLIX_DB;

CREATE TABLE MOVIE(
MOVIE_ID 		INT,
MOVIE_TITTLE	VARCHAR(30),
MOVIE_DIRECTOR 	VARCHAR(20),
MOVIE_STAR		VARCHAR(20),
MOVIE_SCRIPT	LONGTEXT,
MOVIE_FILM		LONGBLOB
);


USE MARKET_DB;

-- 변수를 선언하고 정수 또는 실수를 대입
SET @MYVAR = 5;
SET @MYVAR2 = 4.25;

-- 변수의 내용을 출력
SELECT @MYVAR;
-- 변수끼리 연산 후 출력
SELECT @MYVAR + @MYVAR2;

-- 변수를 선언하고 문자열 또는 정수를 대입
SET @TXT = '가수 이름 ==>';
SET @HEIGHT = 166;

-- HEIGHT > 166과 동일함
SELECT @TXT, MEM_NAME 
FROM MEMBER
WHERE HEIGHT > @HEIGHT;


-- @COUNT 변수에 3 대입
SET @COUNT = 3;

-- MYSQL을 준비해놓음. LIMIT 다음 나오는 물음표는 '현재는 모르지만 나중에 채워짐'이라는 뜻이라고 알고 있으면 됨.
PREPARE MYSQL 
FROM 'SELECT MEM_NAME, HEIGHT FROM MEMBER ORDER BY HEIGHT LIMIT ? ' ;

-- EXECUTE로 MYSQL에 저장된 SELECT 문을 실행할 때 USING 으로 물음표에 @COUNT 변수의 값을 대입하는 것.
EXECUTE MYSQL 
USING @COUNT;

SELECT AVG(PRICE) AS '평균 가격' FROM BUY;

SELECT CAST(AVG(PRICE) AS SIGNED) '평균가격' 
FROM BUY;

SELECT CONVERT(AVG(PRICE), SIGNED) '평균가격' 
FROM BUY;

SELECT NUM, CONCAT(CAST(PRICE AS CHAR), 'X', CAST(AMOUNT AS CHAR), '=')
'가격 X 수량', PRICE*AMOUNT '구매액'
FROM BUY;




-- 내부조인
USE MARKET_DB;
SELECT*
FROM BUY
INNER JOIN MEMBER
ON BUY.MEM_ID = MEMBER.MEM_ID
WHERE BUY.MEM_ID = 'GRL';

SELECT *
FROM BUY
INNER JOIN MEMBER
ON BUY.MEM_ID = MEMBER.MEM_ID;

SELECT BUY.MEM_ID, MEM_NAME, PROD_NAME, ADDR, CONCAT(PHONE1, PHONE2) '연락처'
FROM BUY
INNER JOIN MEMBER
ON BUY.MEM_ID = MEMBER.MEM_ID;

-- 테이블 이름에 별칭을 붙임
SELECT B.MEM_ID, M.MEM_NAME, B.PROD_NAME, M.ADDR, CONCAT(M.PHONE1, M.PHONE2) '연락처'
FROM BUY B
INNER JOIN MEMBER M
ON B.MEM_ID = M.MEM_ID;

SELECT M.MEM_ID, M.MEM_NAME, M.ADDR
FROM BUY B
INNER JOIN MEMBER M
ON B.MEM_ID = M.MEM_ID
ORDER BY M.MEM_ID;



-- 외부 조인 (LEFT)
SELECT M.MEM_ID, M.MEM_NAME, B.PROD_NAME, M.ADDR
FROM MEMBER M
LEFT OUTER JOIN BUY B
ON M.MEM_ID = B.MEM_ID
ORDER BY M.MEM_ID;

-- 외부 조인 (RIGHT)
SELECT M.MEM_ID, M.MEM_NAME, B.PROD_NAME, M.ADDR
FROM BUY B
RIGHT OUTER JOIN MEMBER M
ON M.MEM_ID = B.MEM_ID
ORDER BY M.MEM_ID;

-- IF문
DROP PROCEDURE IF EXISTS IFPROC1;
DELIMITER $$
CREAT`E PROCEDURE IFPROC1()
BEGIN
IF 100 = 100 THEN
SELECT '100은 100과 같습니다.';
END IF;
END $$
DELIMITER;
CALL IFPROC1();
